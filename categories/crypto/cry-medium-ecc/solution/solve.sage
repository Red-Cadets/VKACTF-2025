from Crypto.Util.number import long_to_bytes
def babai_cvp(B, t):
    B = B.LLL(delta=0.75)
    G = B.gram_schmidt()[0]
    b = t
    for i in reversed(range(B.nrows())):
        c = ((b * G[i]) / (G[i] * G[i])).round()
        b -= c * B[i]
    return t - b


def solve_challenge():
    
    p = 11461648835972383580214903223326010690861738189894876304853706788293177059197896138806194486071111804917900964352282940215791806122616716110044437252711728555920518965914002389397599832813385070686988446356347428264654039531290941
    flag_y = 2545717355803992378813046581164336061589172702369455148744010181608496187269887654262595437914814211407336917557156070309806578564896074800086758018426189333820563542914830902958533982803640228021653018090222164024779931554896725  # Пример y-координаты флага  
    e1, x1, y1 = 16677852739431183, 2530219485966312999467046616421750570364684170951267345234138811589900439433343137660254334928663381769906942572261444510001952824494773266470856715286991630788991881234060304033982625923661489122553679268235098364007999345646340, 276267064628520902811244831909513722105490460079695698507698333323276339501679843234695003362628508861967148623867751315677123925501963079789229210439016953044658019036073416669311643611490620103496485536758500315005391319295953
    e2, x2, y2 = 27882006769608833, 10690067426319667348727009813514249417227930985191946018881426591717112133205256578859540067469496523932024455869074874060083240940549034493152745055453705162369317468742597589759898615524682968354665616423014512081794494263755784, 5361161904141914520199250697368244769515856592747557180031101078430141028788070405224143896580686530333110583285939764153753042730292176357271064373526928413650287442647621850655140625443120311731396013443017951689941835317047271
    c1 = (y1 ^ 2 - x1 ^ 3) % p
    c2 = (y2 ^ 2 - x2 ^ 3) % p

    M = [
        [p, 0, 0, 0, 0],
        [2 ^ 55 * (x2 - x1) % p, 1 / 2 ^ 457, 0, 0, 0],
        [-x2, 0, 1 / 2 ^ 55, 0, 0],
        [x1, 0, 0, 1 / 2 ^ 55, 0],
        [1, 0, 0, 0, 1 / 2 ^ 55]
    ]
    M = Matrix(M)


    w = babai_cvp(M, vector(QQ, [(c2 - c1) % p, 1, 1, 1, 1]))
    a_u = int(w[1] * 2 ^ 512)
    a_l = int(e1) ^^ int(-w[3] * 2 ^ 55)

    a = int(a_u + a_l)
    b_xor_e1 = (y1 ^ 2 - x1 ^ 3 - (a ^^ e1) * x1) % p
    b = b_xor_e1 ^^ e1

    P = PolynomialRing(GF(p), 'flag_x')
    f = flag_y ^ 2 - P.gen() ^ 3 - a * P.gen() - b
    roots = f.roots()

    for r, _ in roots:
        return(int(r))


print(long_to_bytes(solve_challenge()))
