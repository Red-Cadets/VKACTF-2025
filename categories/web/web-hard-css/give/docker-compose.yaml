services:

  web-h-kollektiv_hub-go:
    container_name: web-h-kollektiv_hub-go
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "${SERVICE_PORT}:${SERVICE_PORT}"
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on: 
      web-h-kollektiv_hub-postgres:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
          pids: 300



  web-h-kollektiv_hub-postgres:
    container_name: web-h-kollektiv_hub-postgres
    image: postgres:16
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db-data-css:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
          pids: 300



  web-h-kollektiv_hub-bot:
    container_name: web-h-kollektiv_hub-bot
    build:
      context: ./pkg/bot
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env  
    ports:
      - "${BOT_PORT}:${BOT_PORT}"
    depends_on:
      - web-h-kollektiv_hub-go
    networks:
      - app-network
    volumes:
      - ./pkg/bot/flag/flag:/app/flag/flag:ro
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
          pids: 300

networks:
  app-network:
    driver: bridge
  
volumes:
  db-data-css:
